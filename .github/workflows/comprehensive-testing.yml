name: Comprehensive Testing and Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-timeout pytest-mock
    
    - name: Run unit tests with coverage
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-timeout
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --timeout=300 --maxfail=5
    
    - name: Run end-to-end workflow tests
      run: |
        pytest tests/integration/test_comprehensive_e2e.py -v --timeout=600

  performance-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark psutil
    
    - name: Run performance benchmarks
      run: |
        pytest tests/performance/ -v --timeout=900 --benchmark-only --benchmark-json=benchmark.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  edge-case-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-timeout
    
    - name: Run edge case tests
      run: |
        pytest tests/edge_cases/ -v --timeout=300 --maxfail=10
    
    - name: Run security edge case tests
      run: |
        pytest tests/edge_cases/test_comprehensive_edge_cases.py::TestSecurityEdgeCases -v

  security-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run security tests
      run: |
        pytest tests/security/ -v
    
    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json
    
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  quality-assurance:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, edge-case-tests, security-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy pylint
    
    - name: Run code quality checks
      run: |
        # Code formatting check
        black --check src/ tests/
        
        # Import sorting check
        isort --check-only src/ tests/
        
        # Linting
        flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503
        
        # Type checking
        mypy src/ --ignore-missing-imports
        
        # Advanced linting
        pylint src/ --disable=C0114,C0115,C0116 --max-line-length=100

  comprehensive-test-suite:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, edge-case-tests, security-tests]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-html pytest-json-report
    
    - name: Run comprehensive test suite
      run: |
        pytest tests/ -v \
          --cov=src \
          --cov-report=html \
          --cov-report=xml \
          --html=comprehensive-test-report.html \
          --json-report --json-report-file=test-results.json \
          --timeout=1800 \
          --maxfail=20
    
    - name: Generate test summary
      run: |
        python -c "
        import json
        with open('test-results.json', 'r') as f:
            results = json.load(f)
        
        print('=== COMPREHENSIVE TEST SUMMARY ===')
        print(f'Total tests: {results[\"summary\"][\"total\"]}')
        print(f'Passed: {results[\"summary\"][\"passed\"]}')
        print(f'Failed: {results[\"summary\"][\"failed\"]}')
        print(f'Skipped: {results[\"summary\"][\"skipped\"]}')
        print(f'Duration: {results[\"duration\"]:.2f}s')
        
        if results['summary']['failed'] > 0:
            print('\n=== FAILED TESTS ===')
            for test in results['tests']:
                if test['outcome'] == 'failed':
                    print(f'- {test[\"nodeid\"]}: {test[\"call\"][\"longrepr\"]}')
        "
    
    - name: Upload comprehensive test results
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-results
        path: |
          comprehensive-test-report.html
          test-results.json
          htmlcov/
          coverage.xml

  deployment-readiness:
    runs-on: ubuntu-latest
    needs: [quality-assurance, comprehensive-test-suite]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run deployment readiness tests
      run: |
        # Test application startup
        python -c "
        try:
            from app import LegalDocumentSummarizerApp
            app = LegalDocumentSummarizerApp()
            print('âœ“ Application initializes successfully')
        except Exception as e:
            print(f'âœ— Application initialization failed: {e}')
            exit(1)
        "
        
        # Test critical imports
        python -c "
        try:
            from src.services.summarizer import LegalSummarizer
            from src.services.document_handler import DocumentHandler
            from src.services.text_extractor import TextExtractor
            print('âœ“ All critical services import successfully')
        except Exception as e:
            print(f'âœ— Critical service import failed: {e}')
            exit(1)
        "
    
    - name: Generate deployment report
      run: |
        echo "# Deployment Readiness Report" > deployment-report.md
        echo "" >> deployment-report.md
        echo "## Test Results Summary" >> deployment-report.md
        echo "- All unit tests: âœ“ Passed" >> deployment-report.md
        echo "- Integration tests: âœ“ Passed" >> deployment-report.md
        echo "- Performance tests: âœ“ Passed" >> deployment-report.md
        echo "- Security tests: âœ“ Passed" >> deployment-report.md
        echo "- Edge case tests: âœ“ Passed" >> deployment-report.md
        echo "- Code quality: âœ“ Passed" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## Deployment Status" >> deployment-report.md
        echo "ðŸŸ¢ **READY FOR DEPLOYMENT**" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "Generated on: $(date)" >> deployment-report.md
    
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md