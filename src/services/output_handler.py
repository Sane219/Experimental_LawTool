"""
Output and export handler for summary results.
Handles copy-to-clipboard functionality and PDF export features.
"""

import io
import json
from datetime import datetime
from typing import Optional
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_JUSTIFY

from ..models.data_models import SummaryResult


class OutputHandler:
    """Handles summary output formatting and export functionality."""
    
    def __init__(self):
        """Initialize the output handler."""
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Set up custom styles for PDF generation."""
        # Title style
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Title'],
            fontSize=18,
            spaceAfter=20,
            alignment=TA_CENTER,
            textColor=colors.darkblue
        ))
        
        # Subtitle style
        self.styles.add(ParagraphStyle(
            name='CustomSubtitle',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            spaceBefore=12,
            textColor=colors.darkblue
        ))
        
        # Metadata style
        self.styles.add(ParagraphStyle(
            name='Metadata',
            parent=self.styles['Normal'],
            fontSize=10,
            textColor=colors.grey,
            spaceAfter=6
        ))
        
        # Summary text style
        self.styles.add(ParagraphStyle(
            name='SummaryText',
            parent=self.styles['Normal'],
            fontSize=12,
            alignment=TA_JUSTIFY,
            spaceAfter=12,
            spaceBefore=6,
            leftIndent=20,
            rightIndent=20
        ))
    
    def format_summary_for_clipboard(self, summary_result: SummaryResult) -> str:
        """
        Format summary text for clipboard copying.
        
        Args:
            summary_result: The summary result to format
            
        Returns:
            Formatted text string ready for clipboard
        """
        formatted_text = f"""LEGAL DOCUMENT SUMMARY

Document: {summary_result.original_filename}
Generated: {summary_result.generated_at.strftime('%Y-%m-%d %H:%M:%S')}
Word Count: {summary_result.word_count}
Processing Time: {summary_result.processing_time:.2f} seconds
Confidence: {summary_result.confidence_score:.1%}

SUMMARY:
{summary_result.summary_text}

---
Generated by AI-Powered Legal Document Summarizer"""
        
        return formatted_text
    
    def generate_pdf_export(self, summary_result: SummaryResult) -> io.BytesIO:
        """
        Generate a PDF export of the summary with metadata.
        
        Args:
            summary_result: The summary result to export
            
        Returns:
            BytesIO buffer containing the PDF data
        """
        buffer = io.BytesIO()
        
        # Create PDF document
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18
        )
        
        # Build content
        story = []
        
        # Title
        title = Paragraph("Legal Document Summary", self.styles['CustomTitle'])
        story.append(title)
        story.append(Spacer(1, 20))
        
        # Document metadata table
        metadata_data = [
            ['Original Document:', summary_result.original_filename],
            ['Generated:', summary_result.generated_at.strftime('%Y-%m-%d %H:%M:%S')],
            ['Word Count:', str(summary_result.word_count)],
            ['Processing Time:', f"{summary_result.processing_time:.2f} seconds"],
            ['Confidence Score:', f"{summary_result.confidence_score:.1%}"]
        ]
        
        metadata_table = Table(metadata_data, colWidths=[2*inch, 4*inch])
        metadata_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('TOPPADDING', (0, 0), (-1, -1), 6),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.lightgrey),
            ('BACKGROUND', (0, 0), (0, -1), colors.lightblue),
        ]))
        
        story.append(metadata_table)
        story.append(Spacer(1, 30))
        
        # Summary section
        summary_title = Paragraph("Summary", self.styles['CustomSubtitle'])
        story.append(summary_title)
        
        # Split summary into paragraphs for better formatting
        summary_paragraphs = summary_result.summary_text.split('\n\n')
        for para_text in summary_paragraphs:
            if para_text.strip():
                para = Paragraph(para_text.strip(), self.styles['SummaryText'])
                story.append(para)
                story.append(Spacer(1, 12))
        
        # Footer
        story.append(Spacer(1, 30))
        footer_text = "Generated by AI-Powered Legal Document Summarizer"
        footer = Paragraph(footer_text, self.styles['Metadata'])
        story.append(footer)
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        
        return buffer
    
    def generate_filename(self, summary_result: SummaryResult, file_type: str = "pdf") -> str:
        """
        Generate a filename for exported summaries.
        
        Args:
            summary_result: The summary result
            file_type: The file extension (without dot)
            
        Returns:
            Generated filename
        """
        # Clean the original filename
        base_name = summary_result.original_filename
        if '.' in base_name:
            base_name = base_name.rsplit('.', 1)[0]
        
        # Remove special characters
        safe_name = "".join(c for c in base_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_name = safe_name.replace(' ', '_')
        
        # Add timestamp
        timestamp = summary_result.generated_at.strftime('%Y%m%d_%H%M%S')
        
        return f"summary_{safe_name}_{timestamp}.{file_type}"
    
    def create_json_export(self, summary_result: SummaryResult) -> str:
        """
        Create a JSON export of the summary data.
        
        Args:
            summary_result: The summary result to export
            
        Returns:
            JSON string representation
        """
        export_data = {
            "original_filename": summary_result.original_filename,
            "summary_text": summary_result.summary_text,
            "processing_time": summary_result.processing_time,
            "word_count": summary_result.word_count,
            "confidence_score": summary_result.confidence_score,
            "generated_at": summary_result.generated_at.isoformat(),
            "export_timestamp": datetime.now().isoformat(),
            "generator": "AI-Powered Legal Document Summarizer"
        }
        
        return json.dumps(export_data, indent=2, ensure_ascii=False)